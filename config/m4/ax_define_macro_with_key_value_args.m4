# ===========================================================================
#  https://https://gite.lirmm.fr/doccy-dev-tools/autoconf
# ===========================================================================
#
# Serial 1
#
# SYNOPSIS
#
#   AX_DEFINE_MACRO_WITH_KEY_VALUE_ARGS(NAME, PREFIX, SUFFIX,
#                                       [SEPARATOR=:],
#                                       [IF-MISSING=ignore|accept|warn|error],
#                                       [SUBST=no|not_make|yes],
#                                       [HEADER_DEFINE=no|yes|quoted|unquoted],
#                                       KEY_1, ..., KEY_N)
#
#
# DESCRIPTION
#
#   The `AX_DEFINE_MACRO_WITH_KEY_VALUE_ARGS()` macro simply defines the
#   macro `NAME(KEY-VALUE_1, ..., KEY-VALUE_N)`, wich defines a shell
#   variable for all given (and valid) `KEY-VALUE` pair.
#
#   Each `KEY-VALUE` pair is separated with the given `SEPARATOR` (defaults
#   to ':' if empty in the declaration).
#
#   The `NAME` macro is intended to accept only the given keys. If the
#   `IF-MISSING` parameter is set to `ignore`, then invalid keys are simply
#   ignored. If this parameter is set to `accept`, then any key is assumed to
#   be valid. If the 'IF-MISSING` parameter is set to `warn`, then the
#   parameter is accepted but a warning is issued and finally, if it is set
#   to `error` (or any other value) or empty (default), then an error is
#   issued.
#
#   For each valid key, a shell variable is defined, whose name is the
#   concatenation of the given PREFIX, the KEY and the given SUFFIX.
#
#   If `SUBST` is set to `no` (default), then the variable is not used to
#   create an output variable, whereas if it is set to `yes`, an output
#   variable is created using `AC_SUBST()` having the same name than the
#   shell variable (except if the value of the variable contains multiple
#   lines, the variable is also defined as Makefile variable when using
#   *automake*). If the `SUBST` parameter is set to `not_make`, then the
#   output variable is created, but is not defined in makefiles generated by
#   *automake* (see `AM_SUBST_NOTMAKE()`). Any other value for this parameter
#   is equivalent to `no`.
#
#   If `HEADER_DEFINE` is set to `no`, then the variable is not defined in
#   the config C header generated by the `AC_CONFIG_HEADERS()` macro, whereas
#   if it is set to `yes` (or `quoted`), it is defined using the
#   `AC_DEFINE()` macro. If it is set to `unquoted` then the variable is
#   defined in the C config header using the `AC_DEFINE_UNQUOTED()` macro
#   (default). Any other value for this parameter is equivalent to
#   `no`.
#
#   Remark, since commas are used to delimit the `NAME` arguments, if some of
#   your value have a comma, then it must be enclosed with additional square
#   brackets.
#
#   This macro is mainly devoted to produce other macros. The
#   `AX_PACKAGE_INFOS()` macro definition is a good introduction example to
#   see how to use it.
#
#
# LICENSE
#
#   Copyright © 2024-2025 -- LIRMM / CNRS / UM
#                            (Laboratoire d'Informatique, de Robotique et de
#                            Microélectronique de Montpellier /
#                            Centre National de la Recherche Scientifique /
#                            Université de Montpellier)
#
#
#   Auteur/Author:
#     - Alban MANCHERON  <alban.mancheron@lirmm.fr>
#
#   Programmeurs/Programmers:
#     - Alban MANCHERON  <alban.mancheron@lirmm.fr>
#
#   -------------------------------------------------------------------------
#
#   Ce logiciel est régi par la  licence CeCILL  soumise au droit français et
#   respectant les principes  de diffusion des logiciels libres.  Vous pouvez
#   utiliser, modifier et/ou redistribuer ce programme sous les conditions de
#   la licence CeCILL telle que diffusée par  le CEA,  le CNRS et l'INRIA sur
#   le site "http://www.cecill.info".
#
#   En contrepartie de l'accessibilité au code source et des droits de copie,
#   de modification et de redistribution accordés par cette licence, il n'est
#   offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
#   seule une responsabilité  restreinte pèse  sur l'auteur du programme,  le
#   titulaire des droits patrimoniaux et les concédants successifs.
#
#   À  cet égard  l'attention de  l'utilisateur est  attirée sur  les risques
#   associés  au chargement,  à  l'utilisation,  à  la modification  et/ou au
#   développement  et à la reproduction du  logiciel par  l'utilisateur étant
#   donné  sa spécificité  de logiciel libre,  qui peut le rendre  complexe à
#   manipuler et qui le réserve donc à des développeurs et des professionnels
#   avertis  possédant  des  connaissances  informatiques  approfondies.  Les
#   utilisateurs  sont donc  invités  à  charger  et  tester  l'adéquation du
#   logiciel  à leurs besoins  dans des conditions  permettant  d'assurer  la
#   sécurité de leurs systêmes et ou de leurs données et,  plus généralement,
#   à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
#
#   Le fait que  vous puissiez accéder  à cet en-tête signifie  que vous avez
#   pris connaissance  de la licence CeCILL,  et que vous en avez accepté les
#   termes.
#
#   -------------------------------------------------------------------------
#
#   This software is governed by the CeCILL license under French law and
#   abiding by the rules of distribution of free software. You can use,
#   modify and/ or redistribute the software under the terms of the CeCILL
#   license as circulated by CEA, CNRS and INRIA at the following URL
#   "http://www.cecill.info".
#
#   As a counterpart to the access to the source code and rights to copy,
#   modify and redistribute granted by the license, users are provided only
#   with a limited warranty and the software's author, the holder of the
#   economic rights, and the successive licensors have only limited
#   liability.
#
#   In this respect, the user's attention is drawn to the risks associated
#   with loading, using, modifying and/or developing or reproducing the
#   software by the user in light of its specific status of free software,
#   that may mean that it is complicated to manipulate, and that also
#   therefore means that it is reserved for developers and experienced
#   professionals having in-depth computer knowledge. Users are therefore
#   encouraged to load and test the software's suitability as regards their
#   requirements in conditions enabling the security of their systems and/or
#   data to be ensured and, more generally, to use and operate it in the same
#   conditions as regards security.
#
#   The fact that you are presently reading this means that you have had
#   knowledge of the CeCILL license and that you accept its terms.

dnl _macro_set_key(NAME, KEY, VALUE)
dnl
dnl Declare the shell variable corresponding to the `KEY` key of the macro
dnl `NAME` and set it to the given `VALUE`.
dnl
dnl If the `KEY` is not defined for macro `NAME`, according to the `NAME`
dnl macro declaration, either a warning or an error is issued.
dnl
dnl The shell variable results from the concatenation of the macro `NAME`
dnl prefix, the `KEY` and the macro `NAME` suffix. The value is the string
dnl where all the '"' and '\' characters are escaped.
dnl
dnl According to the `NAME` macro declaration, the shell variable may be used
dnl to create an output variable and/or being defined in the C configuration
dnl header generated by the `AC_CONFIG_HEADERS()` macro (with newlines
dnl replaced by the '\n' character).
m4_define(_macro_set_key, [dnl
  m4_ifdef([_stop], [m4_undefine([_stop])])dnl
  m4_set_contains(_$1_available_keys, $2, [],
    [m4_define([_msg], [Key parameter '$2' is unknown; Valid keys are: m4_set_contents(_$1_available_keys, [, ])])dnl
    m4_case(_$1_if_missing,
      [ignore], [m4_define([_stop], [stop])],
      [accept], [],
      [warn], [m4_warn(syntax, _msg)],
      [m4_fatal(_msg)])])dnl
  m4_ifndef([_stop], [dnl
    m4_ifdef([_variable_name], [m4_undefine([_variable_name])])dnl
    m4_define([_variable_name], m4_expand(_$1_prefix[]$2[]_$1_suffix))dnl
    m4_define([_variable_value],
      [m4_bpatsubsts([[$3]],
        [\\], [\\\\],
        ["],  [\\"])])dnl
    m4_define([_variable_c_str_value],
      [m4_bpatsubsts([[$3]],
        [\\], [\\\\],
        ["],  [\\"],
        [
], [\\n])])dnl

[# Definition of the shell variable ']_variable_name[' (by macro '$1')]
_variable_name="_variable_value"
])dnl
  dnl
  m4_case(_$1_subst,
    [yes],      [AC_SUBST(_variable_name)dnl
                 m4_if(_variable_value, _variable_c_str_value, [],
                       [AM_SUBST_NOTMAKE(_variable_name)])],
    [not_make], [AC_SUBST(_variable_name)dnl
                 AM_SUBST_NOTMAKE(_variable_name)])dnl
  dnl
  m4_define([_msg], [Defined by '[$1]'])dnl
  m4_case(_$1_header,
    [yes],      [AC_DEFINE([_variable_name], ["_variable_c_str_value"], _msg)],
    [quoted],   [AC_DEFINE([_variable_name], ["_variable_c_str_value"], _msg)],
    [unquoted], [AC_DEFINE_UNQUOTED([_variable_name], ["_variable_c_str_value"], _msg)])dnl
  dnl
])dnl _macro_set_key


dnl _process_key_value(NAME, KEY-VALUE)
dnl
dnl Split the `KEY-VALUE` pair using the separator defined during the NAME
dnl macro declaration.
m4_define([_process_key_value], [dnl
m4_define([_str], [m4_expand($2)])dnl
  m4_ifdef([_key_val_sep], [m4_undefine([_key_val_sep])])dnl
  m4_define([_key_val_sep], _$1_key_val_sep)dnl
  m4_define([_pos], [m4_index(_str, _key_val_sep)])dnl
  m4_if([_pos], [-1],
    [m4_warn([Separator '_key_val_sep' not found in '$2'])],
    [m4_define([_key], [m4_substr(_str, 0, _pos)])dnl
     m4_define([_val], [m4_substr(_str, m4_eval(_pos+1), 1000)])dnl
     _macro_set_key($1, m4_expand([_key]), m4_expand([_val]))])dnl
])dnl _process_key_value

dnl _define_key_value_init_macro(NAME, PREFIX, SUFFIX,
dnl                             [SEPARATOR=:],
dnl                             [IF-MISSING=ignore|accept|warn|error],
dnl                             [SUBST=no|not_make|yes],
dnl                             [HEADER_DEFINE=no|yes|quoted|unquoted],
dnl                             KEY_1, ..., KEY_N)
dnl
dnl Define the macro NAME(KEY-VALUE_1, ..., KEY-VALUE_N).
m4_define([_define_key_value_init_macro], [dnl
  m4_ifdef([$1], [m4_fatal([Macro $1() already defined])])dnl
  m4_define([_$1_prefix], m4_quote($2))dnl
  m4_define([_$1_suffix], m4_quote($3))dnl
  m4_define([_$1_key_val_sep], m4_default($4, [:]))dnl
  m4_define([_$1_if_missing], m4_default($5, [error]))dnl
  m4_define([_$1_subst], m4_default($6, [no]))dnl
  m4_define([_$1_header], m4_default($7, [no]))dnl
  m4_set_delete(_$1_available_keys)dnl
  m4_set_add_all(_$1_available_keys, m4_shiftn(7, $@))dnl
  dnl
  dnl define <MACRO_NAME>(KEY_VAL_1, ..., KEY_VAL_N)
  m4_define([$1], _$0([[$1]], [$][*]))dnl
])dnl _define_key_value_init_macro

dnl __define_key_value_init_macro(NAME, KEY-VALUE_1, ..., KEY-VALUE_N)
dnl
dnl Wrapper macro that evaluates all `KEY-VALUE` arguments for the macro
dnl `NAME`.
m4_define([__define_key_value_init_macro],
  [[m4_map_args([m4_curry([_process_key_value], [$1])], m4_dquote_elt($2))]]dnl
)dnl __define_key_value_init_macro

# AX_DEFINE_MACRO_WITH_KEY_VALUE_ARGS()
AC_DEFUN([AX_DEFINE_MACRO_WITH_KEY_VALUE_ARGS],
[dnl
AX_REQUIRE_DEFINED([AC_SUBST])dnl
AX_REQUIRE_DEFINED([AC_DEFINE])dnl
AX_REQUIRE_DEFINED([AC_DEFINE_UNQUOTED])dnl
AX_REQUIRE_DEFINED([AM_SUBST_NOTMAKE])dnl

_define_key_value_init_macro($*)]

)dnl AX_DEFINE_MACRO_WITH_KEY_VALUE_ARGS
dnl Local variables:
dnl mode: autoconf
dnl fill-column: 77
dnl End:
